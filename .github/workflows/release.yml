# Name of the workflow
name: Create Release

# Runs the workflow when a new tag starting with 'v' is pushed to the repository
on:
  push:
    tags:
      - 'v*' # Create a release for tags starting with 'v'

jobs:
  release:
    # Specify the type of the runner the job will run on
    runs-on: ubuntu-latest

    # Set permissions to write contents
    permissions:
      contents: write

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      # Step 2: Generate a changelog for the new release using Git
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v2.0.6
        id: git-cliff
        with:
          config: cliff.toml # The configuration file for git-cliff
          args: -vv --latest --strip all # Show verbose output, grab the latest changes, and strip unnecessary details
        env:
          OUTPUT: CHANGES.md # The output file for the changelog

      # Step 3: Prepare release notes by processing the generated changelog
      - name: Set the release notes
        id: release
        shell: bash
        run: |
          # Read contents of changelog into variable 'r'
          r=$(cat ${{ steps.git-cliff.outputs.changelog }})
          # Remove first two lines from 'r'
          r="$(printf "$r" | tail -n +3)"
          # Perform escape sequences replacements in 'r'
          r="${r//'%'/'%25'}"  
          r="${r//$'\n'/'%0A'}" 
          r="${r//$'\r'/'%0D'}" 
          # Save the value of 'r' back into the GitHub environment output
          echo "notes=$r" >> $GITHUB_OUTPUT

      # Step 4: Create a new GitHub release using the gathered information
      - name: Create the release
        uses: nekofar/create-github-release@develop
        with:
          token: ${{ github.token }} # Authentication token from GitHub
          tag: ${{ github.ref_name }} # The name of the tag to be released
          title: ${{ github.ref_name }} # The title for the release
          notes: ${{ steps.release.outputs.notes }} # The release notes generated in the previous step
          draft: true # The release will be created as a draft
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }} # Conditions to mark the release as a pre-release
